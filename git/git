$ git help
$ git help config
# Get a help for comand config.

$ git init
# Initiate git repository.

git log --oneline
show each commit in oneline

git add *.txt
add all txt included in directory

git add "*.txt"
add all txt included in all the project

git add -all
add all new files

git add .
add all directory

git rm <file>
git rm -r <folder>
remove a file from the working directory (if applicable) and stop tracking the file

git rm --cached <file>
stop tracking the file but do not delete from local system

git commit -m 'Comment of commit'
commit adding a comment (use present tense messages)

git -am "Modify readme"
stage traked files and commit
not include new files

git diff
show unstaged differences since last commit
local vs stage

git diff --staged
git diff HEAD
view staged differences
stage vs commit

git diff HEAD^
parent of last commit

git diff HEAD~5
five commit ago

git diff HEAD^..HEAD
second most recent commit vs. most recent

git diff 4fb063f..f5a5ff9
between two hash

git diff master bird
between two branchs

git blame index.html --date shortterminus

HEAD
refers to last commit

git diff HEAD
diff of our most recent commit, which we can refer to using the HEAD pointer

# Unstage files
git reset octofamily/octodog.txt

git checkout -- octocat.txt
get rid of all the changes since the last committerminus

git reset --hard HEAD^
undo last commit and all changes

git reset --hard HEAD^^
undo last 2 commit and all changes

git clean -f
clean added files

git add todo.txt
git commit --amend -m "Modify readme & add todo.txt."
add to the last commit and update the message

git remote add origin https://github.com/try-git/try_git.git
create a remote repository with the name origin

git push -u origin master
upload branch master on repo origin
-u --upsetream - config upstream - .git/config
local/master -> origin/master
-f --force

dont't do these after you push
git reset --soft HEAD^
git reset --hard HEAD^
git commit -amend

git fetch
fetch branches and/or tags (collectively, "refs") from one or more other repositories

git pull origin master
	git fetch
	git merge
check changes and pull down any new changes
does a git fetch followed by a git merge

git pull --rebase
	git fetch
	git rebase
better choice

git stash:
Sometimes when you go to pull you may have changes you don't want to commit just yet. One option you have, other than commiting, is to stash the changes.
Use the command 'git stash' to stash your changes, and 'git stash apply' to re-apply your changes after your pull.

git push heroku-staging staging:master
will push and deploy staging on heroku

git do not have control access, need other software for that
control acess
Hosted
  GitHub
  BitBucket
Self Managed
  Gitosis
  Gitorious

git remote add origin https://github.com/douglasmg7/git-real.git
adding a remote
origin - given name to the repository, can be anyone
can have several remote repositories like, production and test

git remote -v
show remote repositories

git push -u origin master
origin - remote repository name
master - local branch to push

git remote rm <name>
remove remotes

git checkout -- cats.html index.html
discard changes to cats.html and index.html

git clone http://github.com/gitschool/git-real.git
git clone http://github.com/gitschool/git-real.git git-real-codescool
cloning a repository

release branch (rb1.0)
	make changes to a production release without affecting master
	can be update with new commits

use cases for release branches
	manual QA
	long running releases
	on demand hot fixes

release tags
	point to a single commit

git checkout HEAD^
detach HEAD from master and point to commit before

git checkout 3423fdf<tab>
detach HEAD from master and point to a specific commit

git checkout HEAD~3
detach HEAD from master and point to 3 commits before

git branch -f master HEAD~3
git branch -f master erw77f<tab>
move the master

git revert HEAD
create a new commit discarting the changes from the last command
make the last commit equal one before
undo this commit rather than restore this version

git log --graph --full-history --all --color \
        --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"
git log --graph --full-history --all --pretty=format:"%h%x09%d%x20%s"
git log --oneline --decorate --all --graph
git log --graph --oneline --all
show history tree

git config --global alias.tree "log --oneline --decorate --all --graph"
create alias
git tree

git rebase <new-base>
move the current branchâ€™s commits to the tip of <new-base>,
which can be either a branch name or a commit ID.

git checkout unicorns
git rebase master
make unicorns rebase at last commit of master

git rebase --continue
continue rebase after resolve a conflit

git rebase -i HEAD~3
interactive mode
we can choose a specific commit to rebase

git config --global color.ui true
make log color

git log --pretty=oneline
show log in one line

git log --pretty=format:"%h %ad- %s [%an]"
$ad - author date
$an - author name
%h  - sha hash
$s  - subject
$d  - ref names

git log --oneline -p
git log --patch
git log -p
show line changes - p for patch

git log --oneline --stat
show stats for each commit

git log --oneline --graph
visual representation of the branch merging into master

git log --until=1.minute.ago
git log --since=1.day.ago
git log --since=1.hour.ago
git log --since=1.month.ago --until=2.weeks.ago
git log --since=2000-01-01 --until=2012-12-21
show log by date ranges

.git/info/exclude
experiments/
will exclude this folder from git

.gitignore
logs/*.log
don't commit log files

git stash
git stash save
git stash save "New message"
save modifed files on working directory in a temporary area
and go back to last commit
normally, only tracked files get stashed
to allow make importanting changes in master

git stash applay
git stash applay stach@{0}
bring stash files back
bring the top stack stach stach@{0}

git stash save
git checkout master
git commit
git chckout new_branch
git stash applay

git stash list
show a list of stack staches

git stash list --stat
can take any option 'git log' can

git stash show
git stash show stash@{0}
git stash show --patch
show one particular stash

git stash applay stach@{1}
got to a specific stach

git stash drop
git stash drop stach@{0}
remove the stash from the list

git stash pop
=git stash apply && git stash drop

git stash save --keep-index
causes the staging area not to be stashed

git stash save --include-untracked
causes untracked files to be stashed too

git stash branch gerbil-toys stash@{0}
create new branch to restore the stashed@{0}

git stash clear
clears all of them at once

wip
work in progress

git clone rep_original rep_backup
make a backup
you must be on directory above the repository to backup

git filter-branch --tree-filter <command>
<command> is any shell command
purging history

git filter-branch --tree-filter 'rm -f passwords.txt'
git filter-branch -f --tree-filter 'rm -f passwords.txt'
remove passwords.txt from project root
use -f for the second time

git filter-branch --tree-filter 'find . -name "*.mp4" -exec rm {} \;'
remove video files from any directory

git filter-branch -f --prune-empty -- --all
git filter-branch --tree-filter 'rm -f passwords.txt' --prune-empty -- --all
drops commits that don't alter any files

git filter-branch --tree-filter 'rm -f passwords.txt' -- --all
filter all commits in all branches

git filter-branch --tree-filter 'rm -f passwords.txt' -- HEAD
filter all commits in current branch only

git index-branch --index-filter <command>
git index-branch --index-filter 'git rm --cached --ignore-unmatch password.txt'
operate on staging area

line separetor
Unix-like systems use LF
windows use CR and LF

on unix-like systems
git config --global core.autocrlf input
changes CR/LF to LF on commit
fixes any windows line endings that get introduced

on windows systems
git config --global core.autocrlf true
changes LF to CR/LF on checkout
but converts back to LF on commit

.gitattributes
create this file in yout project root
with conversions settings
*					text=auto
*.html		text
*.css 		text
*.bat  		text eol=crlf
*.sh 			text eol=lf
*.jpg			binary

git checkout production
git cherry-pick 532123e
put a specific commit functionality into your branch

git cherry-pick --edit 532123e
change message using cherry pick

git cherry-pick --no-commit 532123e 532123b
stage them but not commit
you can make changes and commit

git cherry-pick -x 4321
-x adds source SHA(original) to commit message

git cherry-pick -signoff 4321
--signoff adds current user's name to commit message
who made the cherry-pick

git submodules
a git repo inside a git repo

# add git repo as a submodule
git submodule add 'git@example.com:css.git'
git commit -m 'new module'
git push

# clone a project with submodule
git clone git@example.com:aquarium.git
# adds entries to .git/config from .gitmodules
git submodule init
# clone submodules
git submodule update
# start into some branch
git checkout master

# modify a submodule
# go inside submodule
cd css
git checkout master
git status
git commit
git push
# the parent project still references the old commit on the submodule
cd ..
git status
git add css
git commit
git push

# if make changes in headless state
git checkout master
git merge b6bb78f

# if make changes in headless state
git branch temp_changes b6bb78f
git checkout master
git merge temp_changes

# worried about forgetting push submodule
git push --recurse-submodules=check
# will abort a push if you haven't pushed a submodule

# to push all repositories(even submodules)
git push --recurse-submodules=on-demand
git config --global alias.pushall 'push --recurse-submodules=on-demand'

# git keeps a second log, only in your local repo, reflog
git reflog

git reflog
43c13e7 HEAD@{2}: 	commit: move txt
sha     shortname   operation

# restore commits
git reset --hard 43c13e7
git reset --hard HEAD@{2}

# show reflog into log
git log --walk-reflogs

# re-create a deleted branch
# need find the last commit from that branch with git log --walk-reflogs
git branch aviary 280e43

fork
copy of repo that you can contribuite
it's a copy of repo into your user name
is like a branch

# pull request
request original repo to merge your changes to them

# Upstream
upstream is the main repo
downstream is the forks

# updating your fork
## add remote for upstream
git remote add upstream <path_to_repo>
## fetch changes
git fetch upstream
## merge them into your master branch
git merge upstream/master master
## push them to your fork (remote)
git push origin master

# fast forward
	* less commits
# recursive
	* clear what was done on a branch
	* single commit to revert
# interacively rebase
	* to simplify history
# rebase
	* to create a linear history

git commit -m "Fixes #1"
will automaticaly close the github issue
	"fixes", "closes" or "resolves" word in a message will close the issue

$ git checkout HEAD file_name
# retrive deleted local file if not commited yet.

