# Alredy installed.
# htop tmux git

### Usefull commands ####################################################

# To show package information.
$ apt-cache show <package>

# To log as root.
$ su


### System configuration #################################################

# Log as root.
$ ssh root@vps10092.publiccloud.com.br

# Create a user.
$ useradd -m -g users -s /bin/bash douglasmg7

# Change password.
$ passwd douglasmg7

# Add to sudo group.
$ usermod -aG sudo douglasmg7

# Test sudo command (logout and login again, to update user group).
$ exit
$ ssh douglasmg7@vps10092.publiccloud.com.br
$ sudo whoami
# Shoud print "root".

# Refresh apt-get's cache of package information using the repository.
$ sudo apt-get update

# Upgrade installed softwares.
$ sudo apt-get upgrade

# Install node and npm using n node manage.
$ curl -L https://git.io/n-install | bash

# Install node version in use. It was 10.15.0 version in 17 Jun 2019.
$ n 10.15.0

# Grant permission to node use ports <1024.
$ sudo setcap cap_net_bind_service=+ep $(which node)

# install mongodb (mongodb-tools included)
$ sudo apt-get install mongodb
# check that MongoDB has been started on port 27017
$ netstat -plntu

# configure mongodb user 
$ mongo
> use admin
# create admin user
> db.createUser({user:"admin", pwd:"password", roles:[{role:"root", db:"admin"}]})    
> exit
# edit "ExecStart" line from "/lib/systemd/system/mongod.service" add "--auth" option
# example: "ExecStart=/usr/bin/mongod --auth --config /etc/mongod.conf"
# reload systemd service
$ sudo systemctl daemon-reload
# restart mongodb $ sudo service mongodb restart
$ sudo systemctl restart mongodb
# log into db
$ mongo -u admin --authenticationDatabase admin -p
# create users.
> use admin
> db.createUser({user: "app", pwd: "password", roles: [{role: "readWrite", db: "zunka"}]})
# this role combines the privileges granted by the readWrite, dbAdmin and userAdmin roles
> db.createUser({user: "douglasmg7", pwd: "password", roles: [{role: "dbOwner", db: "zunka"}]})
> db.createUser({user: "backup", pwd: "password", roles: [{role: "backup", db: "admin"}]})
> db.createUser({user: "restore", pwd: "password", roles: [{role: "restore", db: "admin"}]})
> exit
# Test user
$ mongo -u zunka -p
> use zunka
> exit

# Install redis.
$ sudo apt-get install redis

# install git-secret
$ sudo apt-get install git-secret

# create gpg key
# checking for existing GPG keys
$ gpg --list-secret-keys --keyid-format LONG

# Generating a GPG key.
$ gpg --full-generate-key
  # Press Enter to select RSA and RSA.
  # We recommend the maximum key size of 4096.
  # Press Enter to specify the default selection, indicating that the key doesn't expire.
 
# list the key
$ gpg --list-secret-keys --keyid-format LONG
# copy gpg key "<key>" rsa4096/<key> 2018-08-22 [SC]
# sec   rsa4096/DC40E6E3292EAE53 2018-08-22 [SC]
# key will be DC40E6E3292EAE53

# Prints the GPG key ID, in ASCII armor format
$ gpg --armor --export 3DC40E6E3292EAE5 > public_key.txt

# copy your GPG key, beginning with -----BEGIN PGP PUBLIC KEY BLOCK----- and ending with -----END PGP PUBLIC KEY BLOCK-----
# copy key to a system with x server to copy/paste on github
$ scp douglasmg7@server_url:/home/douglasmg7/zunka/a a
# Add the GPG key to your GitHub account

# Cone app.
$ cd ~
$ git clone https://github.com/douglasmg7/zunka

# Enviorment variables.
sudo ln -s /home/douglasmg7/code/zunka/zunka.sh /etc/profile.d/zunka.sh
sudo ln -s /home/douglasmg7/code/allnations/bin/profile.d/allnations.sh /etc/profile.d/allnations.sh

# Install packages.
cd zunka
npm install
npm i stylus -g
npm i pm2 -g
npm i bower -g
bower install
 
# Create backup from server running.
npm run create-backup
# Upload backup from new server.
./bin/download-backup.sh
# Extract img-xxxx and copy to the correct place.
tar xzvf img-xxxx
# Import mongo data.
./bin/import-db-dev ../dump/db-xxxx
# Import redis data.
sudo systemctl stop redis.service
sudo systemctl status redis.service
sudo cp -p dump/dump-xxx.rdb /var/lib/redis/
sudo chown redis:redis /var/lib/redis/dump.rdb
sudo chmod 660 /var/lib/redis/dump.rdb
sudo service redis-server start

# Install nginx.
$ sudo apt-get install nginx
# Point to config file.
$ cd /etc/nginx
$ sudo cp nginx.conf nginx.conf.old
$ sudo ln -s /home/douglasmg7/zunka/nginx.conf nginx.cong

# Automatically enable HTTPS on your website with EFF's Certbot, deploying Let's Encrypt certificates.
# https://certbot.eff.org/lets-encrypt/ubuntuother-nginx
$ wget https://dl.eff.org/certbot-auto
$ chmod a+x certbot-auto
# To not change nginx config (nginx backup alredy change, so use this).
$ sudo ./path/to/certbot-auto --nginx certonly -d www.zunka.com.br -d zunka.com.br
# Or to change nginx config (Just if not have nginx config backup).
$ sudo ./path/to/certbot-auto --nginx -d www.zunka.com.br -d zunka.com.br  
# Test renew, do nothing if option --dry-run.
$ sudo ./path/to/certbot-auto renew --dry-run
# Run script to install service to automatically run renew twice a day.
$ npm run install-certbot-service

# Install sqlite3.
$ sudo apt install sqlite3

# Install golang.
$ cd ~
$ wget https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz
$ sudo tar -C /usr/local -xzf go1.13.3.linux-amd64.tar.gz
# Enviorment variables alredy set on "/etc/profile.d/zunka.sh"

# Check version.
$ go version

# Get golang repositories.
# zunkasrv.
go get github.com/douglasmg7/zunkasrv
$ cd $GS/zunkasrv
$ git secret reveal
$ go install
# aldowsc.
go get github.com/douglasmg7/aldowsc
$ cd $GS/aldowsc
$ go install
# zoomwsc.
go get github.com/douglasmg7/zoomwsc
$ cd $GS/zoomwsc
$ git secret reveal
$ go install

# Init log, list, xml and dbs.
$ $GS/zunkasrv/bin/init.sh

# Start server.
$ npm run update

# Config boot startup.
$ pm2 startup
# Run the script.

# Save process list.
$ pm2 save

# Needed by rust to compile openSSL.
sudo apt install pkg-config
