npm install -g coffee-script
install coffeescript

coffee -c test.coffee
creates test.js

coffee -cw test.coffee
every time test.coffee is updated re-compile

coffee -c src -o js
compile all .coffee files in the src dir into the js dir

coffe -cw src -o js
every time a file is update re-compile

message = "olá mundo"
var message = "olá mundo";

coffee = ->
	confirm "Ready for some coffe?"
var coffee = function(){
	return confirm("Ready for some coffe?");
}

coffee = (message) ->
	answer = confirm message
	"Your answer is" + #{answer}"
var coffee = function(message) {
	var answer = confirm(message);
	return "Your answer is " + answer;
}

coffee()
coffee("Yo")
coffee Yo
coffee("Yo", 2)
coffee Yo, 2
calling function

coffee = (message="Ready for some coffee?") ->
	answer = confirm message
	"Your answer is #{answer}"
optional parameters

if age < 18
	alert 'Under age'
else
	alert 'of age'

alert 'Under age' if age < 18

if age < 18 then alert 'Under age' else alert 'of age'

no ternary operator

==, is
=== in js

!=, isnt
!== in js

not, unless
! in js

and
&& in js

or
!! in js

true, yes, on
true in js

false, no, off
false

if 2 < newLevel < 5
	alert 'In Range!'
if (2 < newLevel && newLevel < 5)
	alert 'InRange'

message = switch CupsOfCoffee
	when 0 then 'Asleep'
	when 1 then 'Eyes Open'
	when 2 then 'Buzzed'
	else 'Dangerous'

if cupsOfCoffee?
	alert 'it exists'

if (typeof cupsOfCoffee != 'undefined' && cupsOfCoffee != null)
	alert 'it exists'

cupsOfCoffee ?= 0
if not CupsOfCoffee? then cupsOfCoffee = 0
cupsOfCoffee = 0 unless cupsOfCoffee?

if coffeePot? then coffeePot.brew()
coffeePot?.brew()
existential operators

vehicle.startEngine?().shiftGear?()

range = [1..4]
var range = [1, 2, 3, 4];

range = [1...4]
var range = [1, 2, 3];

range = [5,6,7,8,9,10]
range[1..4] 	// 5, 6, 7, 8

var ar = [
	'asdf'
	'erer'
	'ereres'
]
ar.forEach (location, index) -> 
	alert 'location #{location}'

for location in ar
	alert 'Location #{location}'

alert 'Location #{location}' for location in ar

ar = ('#{loc}, FL' for loc in ar)
change the origin array

geloLocate(loc) for loc in ar when loc isnt 'Sanford'
filter expression

newLocs = []
for loc in storeLocations
	newLocs.push loc if loc isnt 'Sanford'

newLocs = (loc for loc in storeLocations isnt 'Sanford')
list comprehension

splat arguments
searchLocation = (brand, cities...) ->
	"looking for #{brand} in #{cities.join(',')}"
searchLocation 'Starducks', 'Orlando'
searchLocation 'Starducks', 'Orlando', 'Winter Park'
params = ['Starducks', 'Orlando', 'Winter Park']
searchLocation(params...)

coffee = name: 'French', strength: 1
coffee = 
	name: 'French'
	strength: 1
	brew: -> alert('brewing #{@name}')

'#{key} has #{value.in_stock}' for key, value of coffees

for key, value of coffees
	'#{key} has #{value.in_stock}'

to_print = for key, value of coffees when value.in_stock > 0
	'#{key} has #{value.in_stock}'
to_print.join ', '	

$('#tabs ul li a').bind({
	click: changeTab,
	mouseenter: showNumberOffFlight,
	mouseleave: hideNumberOffFlight
});
$('#tabs ul li a').bind
	click: changeTab
	mouseenter: showNumberOffFlight
	mouseleave: hideNumberOffFlight

class Coffee extend drink
	constructor: (name, strenght=1) ->
		@name = name
		@strength = strngth
	bew: -> alert 'brewing #{@name}'
class Coffee
	constructor: (@name, @strength=1) ->

french = new Coffee('french', 2)
french.brew()

super
call parent method

=>
fat arrow
binds to current value of this (Class)