alert();
confirm();
prompt();

[].map();

[].pop();
[].push();
[].shift();

for (key in object) {
}

String.prototype.newMethod = func
create a new methods for all strings

var magicShoe = Object.create(shoe);
magicShoes inherit all properties from shoe (shoe.prototype)
Object.isPrototype(magicShoe); - true

function Shoe(size, color) {
	this.size = size;
	this.color = color;
};
Shoe.prototype = {
	putOn: function() {alert('Shoes on!, ' + this.size);}
};

Object.valueOf()
returns whatever primitive type associated with the object
usually override in object types

cocker.constructor;
return the function constructor

cocker.constructor.prototype; =~ cocker.__proto__;
we get the prototype

cocker.__proto__;
get inherited object

isA && isB ? (a=1, b=2) : 
		 (c=3, d=4);
ternary operator

var armory = {addSword: function(sword) {
  this.swords = this.swords ? this.swords : [];
  this.swords.push(sword);
}};

var armory = {addSword: function(sword) {
  this.swords = this.swords || [];
  this.swords.push(sword);
}};

JSON.stringfy(asdf);
JSON.parse();

var weapon = isKnight && armory.retrieveSword('katana');

for-in loop
for(p in list) {
	console.log(list(p));
}
// is faster than for(;;), but will list Array.prototype included

file.js
the browser download all resource in parallel way
the all downloads from a webpage halt until the js file finish to download

<script src='' async>
async attribute allow the rest of the page to load before the script runs

var a ,b; instead of var a; bar b;
every var keyword adds a look-up for the js parser that can be avoided with comma extensions