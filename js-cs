alert();
confirm();
prompt();

[].map();

[].pop();
[].push();
[].shift();

for (key in object) {
}

String.prototype.newMethod = func
create a new methods for all strings

var magicShoe = Object.create(shoe);
magicShoes inherit all properties from shoe (shoe.prototype)
Object.isPrototype(magicShoe); - true

function Shoe(size, color) {
	this.size = size;
	this.color = color;
};
Shoe.prototype = {
	putOn: function() {alert('Shoes on!, ' + this.size);}
};

Object.valueOf()
returns whatever primitive type associated with the object
usually override in object types

cocker.constructor;
return the function constructor

cocker.constructor.prototype; =~ cocker.__proto__;
we get the prototype

cocker.__proto__;
get inherited object

isA && isB ? (a=1, b=2) : 
		 (c=3, d=4);
ternary operator

var armory = {addSword: function(sword) {
  this.swords = this.swords ? this.swords : [];
  this.swords.push(sword);
}};

var armory = {addSword: function(sword) {
  this.swords = this.swords || [];
  this.swords.push(sword);
}};

JSON.stringfy(asdf);
JSON.parse();

var weapon = isKnight && armory.retrieveSword('katana');

for-in loop
for(p in list) {
	console.log(list(p));
}
// is faster than for(;;), but will list Array.prototype included

file.js
the browser download all resource in parallel way
the all downloads from a webpage halt until the js file finish to download

<script src='' async>
async attribute allow the rest of the page to load before the script runs

var a ,b; instead of var a; bar b;
every var keyword adds a look-up for the js parser that can be avoided with comma extensions

console.time()
console.timeEnd()
measure time

d = new Date();
console.log(+d);	// in ms
same that console.log(new Number(d));

try {
	alert(alarm);
	if (list === undefined){
		throw new ReferenceError();
	}
} catch (error) {
	if (err instanceof ReferenceError)
	{

	}
	if (err instanceof TypeError)
	{

	}
} finally {	
}
exception

throw new ReferenceError();
throw new Error('message error');
throw a exception

var drawBridge = {
	soldiers: 8,
	capacity: 20,
	open: function() {
		alert('rrrrrrrrrBang!');
	}
}
with(drawBrigde) {
	open();
	close = function (){ alert('yunyunyunClack!')};
}
// will create close into global scope instead

with
avoid the use

eval(js);
compile the js code
affect legibility, ability to debug, and performance

eval('regiment' + number).motto = 'adf';
create a method on runtime

eval(json)
use JSON.parse() instead

use bracket on if statements always

var num = .3;
num.toFixed(1); // 0.3

parseFloat('.34')
parseInt('88')
parseInt('88', 10)	// decimal value

typeof NaN;		// number
console.log(NaN === NaN); 	// false
isNaN('42'); 	// false

CAR = {
}
simulate a namespace

var ARMORY = (function(){
	// private
	var weaponList = [...];
	var removeWeapon = function(){};
	// public
	return {
		makeWeaponRequest: function(){}
	}
})();
private variables with anonymous clojure

var wartime = true;
var ARMORY = (function(war){
	// private
	var weaponList = [...];
	var removeWeapon = function(){};
	// public
	return {
		makeWeaponRequest: function(){ if (war) ....}
	}
})(wartime);
for clearer, faster globals in modules use imports
the global value stay protected

augmentation provides extra properties for existing modules
in a separate file we'll keep a function which will add values or functionality to our existing module

var wartime = true;
var ARMORY = (function(war){
	// private
	var weaponList = [...];
	var removeWeapon = function(){};
	// public
	return {
		makeWeaponRequest: function(){ if (war) ....}
	}
})(wartime);
// no one private data from initial ARMORY can be reach from augmentetion ARMORY
ARMORY = (function(oldNs){
	// private
	var oilBarrels = 1000;
	// public
	oldNs.assignCatapult = function(regiment){};
	return oldNs
})(ARMORY)
augmentetion