git help
git help config
get a help for comand config

git config --global user.name "Han Solo"
git config --global user.email "hansolo@gmail.com"

git init
initiate git repository

git log --oneline
show each commit in oneline

git add *.txt
add all txt included in directory

git add "*.txt"
add all txt included in all the project

git add -all
add all new files

git add .
add all directory

git rm <file>
git rm -r <folder>
remove a file from the working directory (if applicable) and stop tracking the file

git commit -m 'Comment of commit'
commit adding a comment (use present tense messages)

git -am "Modify readme"
stage traked files and commit
not include new files

git diff
show unstaged differences since last commit
local vs stage

git diff --staged
git diff HEAD
view staged differences
stage vs commit

git reset HEAD
git reset
to unstaged

HEAD
refers to last commit

git diff HEAD
diff of our most recent commit, which we can refer to using the HEAD pointer

git reset octofamily/octodog.txt
to unstage files

git checkout -- octocat.txt
get rid of all the changes since the last commit
-- It's simply promising the command line that there are no more options after the '--'. This way if you happen to have a branch named octocat.txt, it will still revert the file, instead of switching to the branch of the same name.

git reset --soft HEAD^
undo last commit, put changes into staging

git reset --hard HEAD^
undo last commit and all changes

git reset --hard HEAD^^
undo last 2 commit and all changes

git clean -f
clean added files

git add todo.txt
git commit --amend -m "Modify readme & add todo.txt."
add to the last commit and update the message

git remote add origin https://github.com/try-git/try_git.git
create a remote repository with the name origin

git push -u origin master
put your commit on repository origin in to brach master
-u remember the parameters, so next time we can simply run git push

dont't do these after you push
git reset --soft HEAD^
git reset --hard HEAD^
git commit -amend

git fetch
fetch branches and/or tags (collectively, "refs") from one or more other repositories

git pull origin master
check changes and pull down any new changes
does a git fetch followed by a git merge

git stash:
Sometimes when you go to pull you may have changes you don't want to commit just yet. One option you have, other than commiting, is to stash the changes.
Use the command 'git stash' to stash your changes, and 'git stash apply' to re-apply your changes after your pull.

git branch <branch-name>
create a new branch using the current working directory as its base

git branch
list all branches

git checkout <branch-name>
make the working directory and the HEAD match the specified branch

git checkout -b new_feature
create a new branch and checkout

git merge <branch-name>
merge a branch into the checked-out branch

git branch -d <branch-name>
delete a branch

git branch -D <branch-name>
delete a branch with warnings

create remote branch
git checkout -b shopping_cart
git push origin shopping_cart

git branch -r
list remote branchs
need use 'git fetch' first

git remote show origin
list all branchs

git push origin :shopping_cart
delete remote branch shopping_cart

git remote prune origin
to clean up deleted remote branches

git push heroku-staging staging:master
will push and deploy staging on heroku

git do not have control access, need other software for that
control acess
Hosted
  GitHub
  BitBucket
Self Managed
  Gitosis
  Gitorious

git remote add origin https://github.com/douglasmg7/git-real.git
adding a remote
origin - given name to the repository, can be anyone
can have several remote repositories like, production and test

git remote -v
show remote repositories

git push -u origin master
origin - remote repository name
master - local branch to push

git remote rm <name>
remove remotes

git checkout -- cats.html index.html
discard changes to cats.html and index.html

git clone http://github.com/gitschool/git-real.git
git clone http://github.com/gitschool/git-real.git git-real-codescool
cloning a repository

generating a new ssh key
$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
ensure ssh-agent is enabled
$ eval "$(ssh-agent -s)"
add your ssh to the ssh-agent
ssh-add ~/.ssh/id_rsa
copy to clipboatd the file content
~/.ssh/id_rsa.pub
test 
ssh -T git@github.com
use ssh
$ git remote set-url origin git@github.com:username/repo.git

using ssh
$ git remote set-url origin git@github.com:username/repo.git

using https
$ git remote set-url origin https://github.com/username/repo.git

git config --global credential.helper cache
set git to use the credential memory cache
git config --global credential.helper 'cache --timeout=3600'
set the cache to timeout after 1 hour (setting is in seconds)

git tag
list all tags

git checkout v0.0.1
checkout code at commit

git tag -a v0.0.3 -m 'version 0.0.3'
add a tag

git push --tags
push tag to the server

git checkout HEAD^
detach HEAD from master and point to commit before

git checkout 3423fdf<tab>
detach HEAD from master and point to a specific commit

git checkout HEAD~3
detach HEAD from master and point to 3 commits before

git branch -f master HEAD~3
git branch -f master erw77f<tab>
move the master

git revert HEAD
create a new commit discarting the changes from the last command
make the last commit equal one before
undo this commit rather than restore this version

git log --graph --full-history --all --color \
        --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"
git log --graph --full-history --all --pretty=format:"%h%x09%d%x20%s"
git log --oneline --decorate --all --graph
git log --graph --oneline --all
show history tree

git config --global alias.tree "log --oneline --decorate --all --graph"
create alias

git rebase <new-base>
move the current branchâ€™s commits to the tip of <new-base>, 
which can be either a branch name or a commit ID.

git rebase --continue
continue rebase after resolve a conflit