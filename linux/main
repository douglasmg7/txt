ctr + alt + f1
	login tty1 (virtual terminal)

ctr + alt + f7
	go to gui

dpms
	Debian Package Management System

apt
	A difference between apt and dpkg is that apt does not directly deal with .deb packages; instead, it manages software via the locations (repositories) specified in a configuration file. This file is the sources.list file.

dpkg -l
	list all currently installed softwares

dpkg -l bash
	Get basic information about the bash package.

dpkg --print-avail
	show detailed information about the bash package.

dpkg -L bash
dpkg-query -L bash
	list of files that comes with the bash package

dpkg -x file.deb
	extract a .deb file

dpkg --install lynx_2.8.6-2ubuntu2_i386.deb
dpkg --remove lynx
	Install and remove a .deb package.

dpkg-query -l
dpkg --get-selections | grep -v deinstall
	list of packages installed
	-v tag "inverts" grep to return non-matching lines

dpkg --search absolute_file_name
	find what package a particular file belongs to

apt-get update
	refresh apt-get's cache of package information using the repository
	/etc/apt/sources.list

apt-get upgrade
	upgrade installed softwares.

apt-get update && apt-get upgrade
	best way to use the commands.

apt-get dist-upgrade
	in addition to performing the function of upgrade, also intelligently handles changing dependencies with new versios of packages
apt-get install lynx
apt-get remove lynx
apt-get install lynx-
apt-get --purge remove lynx
	remove configuration files too.

apt-cache search slite3
	Pesquisar por pacotes

apt-cache show torcs
	show info about a package

apt-cache policy torcs
	show policy about a package

aptitude
	show installed packages

aptitude show package_name
	display package details

aptitude --search package_name
	look for a package

aptitude install package_name
	install a package

#
  indica que está logado como usuário root

free
  show free ram memory

cd -
  back to pwd before

cd ~usuário
  vai para a pasta de um usuário espcífico

cd "$(find -name ofic* -quit)"
  use find as argument

mkdir -p dir1/sub1/sub2
  create directories and subdirectories

file file_name
  lista o tipo do arquivo

$ less file_name
$ less file_name -R
# Imprimir um arquivo no console.
# Fast for big files.
# -r or --raw-control-chars - Causes "raw" control characters to be displayed.
# -R or --RAW-CONTROL-CHARS - Like  -r,  but only ANSI "color" escape sequences are output in "raw" form.

dpkg --get-selections
obtem os programas instalados

apt-get autoremove
remove software sem dependências

whereis software_name
procura por arquivos de configuração

rm -rf /etc/apache2
remove o diretório

cp -u *.txt dir_destino
copia todos os aqruivos que não existem ou são mais novos

cp -i a.txt b.txt
ask if you want overwrite hte file

cp -R dir_a/ dir_b/
copy all files

mv a.txt b.txt
rename a file

ln src_file link
cria um hard link

ln -s src_file link
cria um symbolic link

cp /var/* .
copia tudo para o diretório atual

type -a cp
	mostra o tipo do comando, -a mostra todos em vez de mostrar somente o primeiro
	show all if have a built-in shell command and a external program

which ls
mostra a localização do comando

PATH=$PATH:.
	put current directoy into path

tar - archiving utility
	-z redirects to gzip (.gz)
	-j redirects to bzip2 (.bz2)
	-f use archive
	-x extract
	-v verbose
	-c create
	-t list but not extract

tar -xzvf file_name.tar.gz
tar -jxf file.tar.bz2

gzip -d <file>
extract .gz files

unzip <file>
extract .zip files

unrar x <file>
extract .rar files

man ls
man 1 ls
info ls
mostra a documentação do comando ls

ls -h ou ls --help
mostra o help do comando ls

apropos command
man -k command
pesquisa pelo comando no manpages names e nas descrições

stat file
mostra informações do arquivo

ls
	-F mostra o tipo do arquivo / diretório * executavel, @ symbolic link, % whiteout, = socket, | FIFO
	-R recursive - show directory content
	-d list name directory, no the content directory
	-t order by date
	-tr order by reverse date
	-a list hide files
	-l list in long format
	-i inode number

ls -l --time=atime a.txt
show access time instead change time

pwd
print working directory

env
printenv
	view ao global enviroment variables

printenv USER
	view the value of USER enviroment variable

set
	view all enviroment variables (local, global, user-defined), shell variables and functions variables

echo $USER
view the value of USER enviroment variable

unset var_name
	remove a variable

ls | grep java
obtem todas as linha que contem java

sed - stream editor, but can edit files directly too
	sed -i -e 's/foo/bar/g' filename
	s is used to replace the found expression "foo" with "bar"
	g stands for "global", meaning to do this for the whole line. If you leave off the g and "foo" appears twice on the same line, only the first "foo" is changed to "bar".
	-i option is used to edit in place on filename.
	-e option indicates a command to run.

# imprimir um arquivo no console
cat file_name
	-n print line number
	-b print no empty line nuber

# send text to a file
cat > a.txt
bla bla <c-d><c-d>

# imprimir um arquivo no console
more file_name

/usr/share/applications$
launcher for applications

turn off
gnome-session-quit --power-off
gnome-session-quit --reboot

lsb_release -a
linux version

dpkg-reconfigure keyboard-configuration
keyboard configuration

cat /proc/cpuinfo
lscpu
cpu info

cat /proc/meminfo
memory info

top (f to setup)
htop (improved top)
gnome-system-monitor
cpu and memory use

ps
	report a snapshot of the current processes
	-e show all precess
	-f full format listing
	-F full format listing (another)
	-l long format output
	--forest show subshell tree
	ps aux	list processes - BSD syntax
	ps li list processes - BSD syntax
	ps -p 48 	list process by id

$ ps T
# Show proccess from current terminal.

ps -p 7495 -o pid, ni, cmd
	show specific informations

nice -n 10 sleep 3000&
nice -10 sleep 3000&
	start program with priority 10 (-20 - 19)

renice -11 -p 4489
	change process priority

at -f script_name now + 25 minutes
at -f script_name now
at -f script_name 10:27
at -f script_name dd.mm.yy
	schedule a job
	-M suppress generated output

atq
	list peding jobs

atrm 18
	remove peding job 18

crontab -l
	list a cron tab
crontab -e
	edit cron tab
	min hour dayofmonth month dayofweek command
	15 10 * * * command

anacron
	determines that a job has missed a scheduled running, it runs the job as soon as possible. This means that if your Linux system is turned off for a few days, when it starts back up, any jobs scheduled to run during the time it was off are automatically run

pgrep firefox
get pid of firefox process

kill 1254
kill -15 1254
send a term(15) signal to the process
this allows the program to perform clean-up operations and exit smoothly

kill -l
list signal names

kill -SIGKILL 4545
kill -KILL 4545
kill KILL 4545
kill -9 4545
send to kernel, which shuts down the process
this is used to bypass programs that ignore the signals sent to them

killall http*
kill all processes that start with http

jobs
	list process in background for current shell
	-l list PID
	-n list only jobs that have changed their status sice the last notification from the shell
	-p list only the pid of the jobs
	-r list only the running jobs
	-s list only stopped jobs

lscpu - list cpu
lsusb - list usbs
lsscsi - list scsis
lsblk - list block devices

wc -l
count number of lines

who
show who is logged

mount
	list media devices currently mounted

mount -t type device directory
mount -t vfat /dev/sdb1 /media/disk
	mount a media device

umount [directory | device]
umount /home/rich/mnt
	unmount a device

umount -fl /dev/sdb1
	unmount

/etc/fstab
	filesystem mount at boot time

fdisk -l
	list partition table

fdisk /dev/sdb
	create partitions the disk sdb

mkfs.ext4 /dev/sdb1
	create a ext4 filesystem on partition /dev/sdb1

eject /dev/sdb1
	eject the device

whatis touch
obtain a brief description only about a specific command whose exact name is already known

ps aux | grep 'node'
outputs all node.js programs running on a machine

uname -p
to know the architecture type of processor
Classic Shell Script - 9

touch file.txt
change timestamps file, if not exist create the file

touch text-{a,b,c}.txt
create files: text-a.txt, text-b.txt, text-c.txt

touch -a file.txt
change only the access time

dmesg
hardware error messages

xdg-open file-name
open a pdf

echo "hey" >&2
redirect stdout from echo command to stderr

1>file-name
>file-name
redirect stdout to file-name

1>>file-name
>>file-name
redirect and append stdout to file-name

2>file-name
redirect stderr to file-name

&>file-name
redirect borh stdout and stderr to file-name

m>n
m is a file descriptor, which defaults to 1, if not explicitly set
n is a file name

m>&n
m is a file descriptor, which defaults to 1, if not explicitly set
n is another file descriptior

stat file
show file status like timestamp

journalctl --unit=bash
show error msg from porcess bash

history
	list history of commands used
	-a force the history command to be writen, before exit the shell
	-n force the .bash_history to be read

history 8
	show last 8 commands

!1234
	re-use history command 1234

!!
	re-use the last command

!?cl
	look history for command with cl

!cl
	execute clear again

~/.bash_history
	keep the history command

# look for history command
ctr+r
	# enter reverse search
ctr+r
	# to choose the command
return
	# execute the comand

du -shc *
size content directory
-s --summarize
-h --human-readable
-c --total
-a --all
--max-depth=1

df
disk free - reports the amount of space used and available on currently
mounted filesystem

ctrl + d, ctrl + d
insert EOF in command line

uniq file.txt
filters out adjacent, duplicate lines in a file

hostname
get the computer name

sort -hr
  sort lines
  -h --human-numeric-sort (2K 1G)
  -r --reverse
  -u unique
  -n recognize numbers as numbers
  -M --month-sort
  -t --field-separator
  -k --key 	position

run a program in a modified environment
env <program>
	-i, --ignore-environment
		start with an empty environment
	-u, --unset=NAME
		remove variable from the environment

send ICMP ECHO_REQUEST to network hosts
ping -c 3 -W 1 1.1.1.1
-c count
-W timeout

head -3 file_name | tail -1
select the 3th line
head -3  	# print tree first lines
tail -1		# print one end line

tail -f file_name
update, good to view log files

colrm 100
show the first 100 column for each line

cut -f1 -d: file_name
	f1	fild to extract
	-d	delimiter
cut -c44-50
	print 44 column to 50
cut -c44-
	print 44 column to end

awk
'condition {action}'
dpkg -l | awk ' /'vim'/ {print $2}'
	print second column from line with 'vim'
ps -f | awk '{print $2, $8}'
	print column 2 and 8
awk 'NR==2'
	print second line

bc -q bash calculator
	-q suppresses the lengthy welcome banner
	bc <<< 'scale=2; 100/3' 	# 33.33


youtube-dl https://www.youtube.com/watch?v=iRYvuS9OxdA
download youtube video

youtube-dl --list-formats https://www.youtube.com/watch?v=iRYvuS9OxdA
list available formats

youtube-dl -f 18 https://www.youtube.com/watch?v=iRYvuS9OxdA
download a preferred file format

youtube-dl -a youtube_links.txt
download a alist of videos on file youtube_links.txt

setterm -reset
setterm -foreground cyan
setterm -background yellow
setterm -inversescreen on
change terminal colors

file globbing
metacharacter wildcard
*, ?, [], !

open program in background
xterm &

suspend a program and put in backgroun
xterm
[ctrl + z]
bg

sh
default system shell
usally bin/sh -> bash

dash
start a dash shell

subshell is a child shell

alias ls='ls -l'
	create a alias
	-p show list of created alias

bash
	spawn a subshell

install from source
	unpack a software tarball with tar
	read the README or AAAREADME file
	./configure
		check your linux system to ensure it has the proper library dependencies
	make
		compile the source code
	make install
		install it in a common location on your linux system

xclip -selection c
	ls | xclip -selection c
	copy to clipboard

readlink -f file_name
realpath file_name
	show full path name for file_name

/etc/init.d
	create a script to be load at start-up system
	need complain the defaults (start stop switch)
	update-rc.d my_script defaults
		add to system start-up
	update-rc.d -f  my_script remove
		remove from system start-up

/etc/rc.local
	add command to rc.local to be load at start-up system

/etc/init/my_job.conf
	create a new job

gpg
	encryption

# Returns just the script’s name without the path
basename /home/Christine/test5b.sh
# -> test5b.sh

bash
shopt
	# Show options status
	# Change additional shell optional behavior.
shopt -s nocaseglob
	# (set) no case sensitive
shopt -u nocaseglob
	# (unset) case sensitive

zsh
unsetopt CASE_GLOB

fold -w 80 file_name
	# wrap with 80 width

rcconf
update-rc.d
file-rc
	# utilities to manage your startup or init scripts

update-rc.d firewall start 20 2 3 4 5 . stop 20 0 1 6 .
	# serviço firewall
	# ordem 20 (S20firewall)
	# runlevel

update-rc.d firewall defaults [NN | NN-start NN-stop]
	# will make links to start the service in runlevels 2345 and to stop the service in runlevels 016. By     default  all the links will have sequence number 20, but this should be overridden if there are dependencies

update-rc.d firewall defaults
update-rc.d firewall defaults 20
update-rc.d firewall defaults 20 20
update-rc.d firewall start 20 2 3 4 5 . stop 20 0 1 6 .
	# equivalent

update-rc.d -f firewall remove
	# remove symbolic links from rcN.d

update-rc.d -n firewall remove
	# simulate the command, but don't do nothing

/etc/init.d/rc.local
	# put your personal scripts

/etc/init.d
	# files in /etc/init.d are shell scripts that respond to start, stop, restart, and (when supported) reload commands to manage a particular service. These scripts can be invoked directly or (most commonly) via some other trigger (typically the presence of a symbolic link in /etc/rc?.d/).

init
	# init program, the first process that is run when the kernel has finished initializing

/etc/init
	# contains configuration files used by Upstart. Upstart is a young service management package championed by Ubuntu. Files in /etc/init are configuration files telling Upstart how and when to start, stop, reload the configuration, or query the status of a service. As of lucid, Ubuntu is transitioning from SysVinit to Upstart, which explains why many services come with SysVinit scripts even though Upstart configuration files are preferred. In fact, the SysVinit scripts are processed by a compatibility layer in Upstart.

.d
	# in directory names typically indicates a directory containing many configuration files or scripts for a particular situation (e.g. /etc/apt/sources.list.d contains files that are concatenated to make a virtual sources.list; /etc/network/if-up.d contains scripts that are executed when a network interface is activated). This structure is usually used when each entry in the directory is provided by a different source, so that each package can deposit its own plug-in without having to parse a single configuration file to reference itself. In this case, it just happens that “init” is a logical name for the directory, SysVinit came first and used init.d, and Upstart used plain init for a directory with a similar purpose (it would have been more “mainstream”, and perhaps less arrogant, if they'd used /etc/upstart.d instead).

mktemp
	# create a unique temporary file in the /tmp folder
mktemp /tmp/bla.XXXX
	# create a temp file with format bla.XXXX
mktemp -t bla.XXXX
	# create a temp file in the temporary directory of the system
mktem -d dir.XXXX
	# create a temp dir

ctrl + c
	# generates a SIGINT (interrupt)
ctrl + z
	# generates a SIGTSTP (stop or pause)

man standarts
[]  - Anything between square brackets (“[” and “]”) is optional.
... - Anything followed by an ellipsis (“...”) can be repeated.
{}  - Curly braces (“{” and “}”) mean that you should select one of the items separated by vertical bars (“|”).

mandb
	If you add additional man pages to your system, you may need to rebuild this file with mandb

halt
	terminates all processes and shuts down the cpu
poweroff
	is exactly like halt, but it also turns off the unit itself (lights and everything on a PC). It sends an ACPI command to the board, then to the PSU, to cut the power.
shutdown
	is like poweroff, but it also runs the shutdown scripts.

ENOENT
	Error NO ENTry

acpi -V
	view computer temperature

# change hd name, label
e2label /dev/sdb1 new_name

add-apt-repository ppa:neovim-ppa/unstable    # add ppa
add-apt-repository --remove ppa:neovim-ppa/unstable   # remove ppa

# show lines that contain "var nu_l" from all js files
find -n *.js | xargs grep "var nu_l"

find $PWD -name '*.mp3' | xargs -I{} cp {} ~/mob/store_00010001/aa     # copy several files

Udev
  Is the device manager that creates/remove device nodes
  in the /dev directory dynamically.

  The Kernel will send a bunch of data through the netlink
  socket when a device is added to, or removed from a system.

  The Udev daemon catches all this data and will do the rest, i.e.,
  device node creation, module loading etc.

  Udev parses the rules in /etc/udev/rules.d/ for every device
  state change in the Kernel

Dbus
  Is like a system bus which is used for inter-process communication.

HAL
  Gets information from the Udev service, when a device is
  attached to the system and it create an XML representation
  of that device

modalias
  Contains all the information required to find the corresponding
  device driver.

  Udev uses the modalias data to find the correct device drive from:
    /lib/modules/`uname -r`/modules.alias
      v
        vendor ID of the device.
      d
        device ID of the device.
      sv
        subsystem version vendor
        A majority of the time sv and sd are ignored. They are mainly used by the hardware developers to distinguish slight differences in the inner workings which do not change the device as a whole.
      sd
        subsystem version device
      bc
        base class
        Are usesd to create the class listed bu lspci
      sc
        Sub class
      i
        Programming interface
        Which is only meaningful for a few devices classes

  Get more information about the drive (module)
    modinfo <device-name>
    modinfo r8169

netlink
  The Kernel supplies data through netlink

hwdb
  Hardware database.
  The hwdb files are read from the files located in:
    system hwdb directory
      /usr/lib/udev/hwdb.d
    administration hwdb directory
      /etc/udev/hwdb.d
      have the highest priority

$ exec ls
# Will not fork, but just replaces the shell.
$ bash -c 'echo $$ ; ls -l /proc/self ; echo foo'
$ bash -c 'echo $$ ; exec ls -l /proc/self ; echo foo'

$ eval
# Construct command by concatenating arguments.
# It will not create a child process, so the variable is set in the current shell.
# example.
$ foo=10 x=foo
$ y='$'$x
$ echo $y
  $foo
$ eval y='$'$x
$ echo $y
  10

tmpfs 
# Is a temporary filesystem that resides in memory and/or your swap partition(s), depending on how much you fill it up.
# Mounting directories as tmpfs can be an effective way of speeding up accesses to their files, or to ensure that their contents are automatically cleared upon reboot. 

# Execute multiple commands (concat commands).
# A; B    # Run A and then B, regardless of success of A
# A && B  # Run B if and only if A succeeded
# A || B  # Run B if and only if A failed
# A &     # Run A in background.

# Start Vim as my user with root privileges.
sudoedit <file>
# EDITOR env must be vim.
export EDITOR=vim
