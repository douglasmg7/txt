# Install Windows first.

# Download the lastest archlinux version from BitTorrent (recommended)  
https://www.archlinux.org/download/

# Verify PGP signature.
$ gpg --keyserver-options auto-key-retrieve --verify archlinux-xxx.iso.sig archlinux-xxx-x86_64.iso
# Primary key fingerprint and RSA must be equal. 
# It's ok "WARNING: This key is not certified with a trusted signature!"

# Find out the USB drive name.
$ sudo fdisk -l
# Or
$ lsblk

# Write iso to USB drive.
# Run the following command, replacing /dev/sdx with your drive, e.g. /dev/sdb. 
$ dd bs=4M if=path/to/archlinux.iso of=/dev/sdx status=progress oflag=sync

# Start pc from created USB drive linux system.

# Set the keyboard layout.
# Find out a layout.
$ ls /usr/share/kbd/keymaps/**/*.map.gz | grep br
# Modify the layout.
$ loadkeys br-abnt2

# Verify the boot mode.
# If UEFI mode is enabled on an UEFI motherboard, Archiso will boot Arch Linux accordingly via systemd-boot. 
# To verify this, list the efivars directory: 
$ ls /sys/firmware/efi/efivars
# If the directory does not exist, the system may be booted in BIOS or CSM mode.

# List network interfaces options.
$ ip link

# Connect to network (device=wlan0)
# https://wiki.archlinux.org/title/Iwd#iwctl
# Enter interactive prompt:
$ iwctl
# List available commands:
[iwd]# help
# First, if you do not know your wireless device name, list all Wi-Fi devices:
[iwd]# device list
# Then, to scan for networks:
[iwd]# station wlan0 scan
# You can then list all available networks:
[iwd]# station wlan0 get-networks
# Finally, to connect to a network:
[iwd]# station wlan0 connect nimbus
# To disconnect from a network:
[iwd]# station device disconnect
# Show device and connection information
# To display the details of a WiFi device, like MAC address:
[iwd]# device wlan0 show
# To display the connection state, including the connected network of a Wi-Fi device:
[iwd]# station wlan0 show
# To exit prompt.
[iwd] exit


# Update the system clock.
$  timedatectl set-ntp true
# To check the service status, use:
$ timedatectl status

# Check partition table.
$ fdisk -l    

$ cfdisk /dev/nvme0n1
# Create partitions.
# 700G Linux filesystem (8300) - root
#  64G Linux swap (8200) - swap
# Remember to write.

# Format.
mkfs.ext4 /dev/nvme0n1pX
mkswap /dev/nvme0n1pX
swapon /dev/nvme0n1pX

# Mount system.
mount /dev/nvme0n1pX /mnt

# Find EFI System.
cfdisk /dev/nvme0n1
mkdir /mnt/efi
mount /dev/nvme0n1pX /mnt/efi

# Run script to install base package.
$ pacstrap /mnt base base-devel linux linux-firmware   

# Generate an fstab file (use -U or -L to define by UUID or labels, respectively):
$ genfstab -U /mnt >> /mnt/etc/fstab   

# Change root into the new system.
$ arch-chroot /mnt    

$ ln -sf /usr/share/zoneinfo/Brazil/East /etc/localtime   
# Set the time zone.

$ hwclock --systohc   
# generate /etc/adjtime.

# Install text editor.
pacman -Sy vim

# Uncomment en_US.UTF-8 UTF-8, pt_BR.UTF8 UTF8 and other needed localizations in /etc/locale.gen, and generate them with:
locale-gen

# Change or create /etc/locale.conf
LANG=en_US.UTF-8
LANG=pt_BR.UTF-8
# LANG=pt_BR.UTF-8 UTF-8

# Console font.
$ pacman -S terminus-font
# Create or change the file "/etc/vconsole.conf" to set font and retain keyboard configuration.
KEYMAP=br-abnt2
FONT=ter-216n.psf.gz
FONT_MAP=8859-2

# Change or create /etc/hostname
sonic

# Edit hosts if necessafy /etc/hosts
127.0.0.1       localhost
::1             localhost
127.0.1.1       sonic.localdomain   sonic 

# Create a new user.
# -m create home directory
# -g defines the group name
# -G list of supplementary groups which the user is also member
# -s default login shell
# $ useradd -m -g users -G wheel,storage,power,audio,video -s /bin/bash douglasmg7     
$ useradd -m -G wheel,storage,power,audio,video -s /bin/bash douglasmg7     

# Password.
$ passwd douglasmg7

# Grant perimition to use the sudo command.
# Use the command visudo, it will change the file "/etc/sudoers".
# Uncomment the line "%wheel ALL=(ALL) ALL"
$ visudo

# Install grub.
pacman -S grub efibootmgr
# To find window installation.
pacman -S os-prober

# Edit /etc/default/grub and add/uncomment:
GRUB_DISABLE_OS_PROBER=false

grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
grub-mkconfig -o /boot/grub/grub.cfg

# change root password
passwd

# Exit chroot environment.
exit

# Restart and remove the installation media.
reboot

