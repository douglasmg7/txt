# Some software providers sign archive files instead of (or as well as) providing as md5 checksum.
# In this case you should:
#   Download the provider's publick key from their website (using https where possible)
#   Download the "signature file" for the archive-file; this will be a small file which has the same base name as the downloaded file, with suffix ".sig" or ".asc"
#   Perform the following steps
$ gpg --import <publick-key>
$ gpg --verify <signature-file-name>
# The verify setp decrypts the signature-file, revealing a checksum;
# It will runs a checksum algorithm over a real file and check that they are the same.

# checking for existing GPG keys
$ gpg --list-secret-keys --keyid-format LONG

# Generating a GPG key.
$ gpg --full-generate-key
  # Press Enter to select RSA and RSA.
  # We recommend the maximum key size of 4096.
  # Press Enter to specify the default selection, indicating that the key doesn't expire.

# list the key
gpg --list-secret-keys --keyid-format LONG
# copy gpg key "<key>" rsa4096/<key> 2018-08-22 [SC]
# sec   rsa4096/DC40E6E3292EAE53 2018-08-22 [SC]
# key will be DC40E6E3292EAE53

# Prints the GPG key ID, in ASCII armor format
$ gpg --armor --export 3DC40E6E3292EAE5 > public_key.txt

# copy your GPG key, beginning with -----BEGIN PGP PUBLIC KEY BLOCK----- and ending with -----END PGP PUBLIC KEY BLOCK-----
# copy key to a system with x server to copy/paste on github
$ scp douglasmg7@server_url:/home/douglasmg7/zunka/a a
# Add the GPG key to your GitHub account




# Encrypting a file (using the key that was generated with user user@email.com).
# Will create a crypted file with extension gpg.
$ gpg -e -r <user@email.com> <file>

# Decryping a file.
$ gpg -d <file.gpg> > <file>
$ gpg <file.gpg>

# List public keys.
$ gpg -k

# List secret keys.
$ gpg -K

# Delete a public key.
$ gpg --delete-keys <uid>

# Delete a private key.
$ gpg --delete-secret-keys <uid>

# Export a public key.
$ gpg --export <uid>
$ gpg --export -a -o <file> <uid>   # -a ascii format, -o output  file.

# Import a key from a file.
$ gpg --import <file>


# Backup gpg keys.
# Export public and secret key and ownertrust
$ gpg -a --export chris@seagul.co.uk > chrisroos-public-gpg.key
$ gpg -a --export-secret-keys chris@seagul.co.uk > chrisroos-secret-gpg.key
$ gpg --export-ownertrust > chrisroos-ownertrust-gpg.txt

# Import secret key (which contains the public key) and ownertrust
$ gpg --import chrisroos-secret-gpg.key
$ gpg --import-ownertrust chrisroos-ownertrust-gpg.txt

# Backup all 

