# Linear algebra library for python

# Install.
conda install numpy

# Import.
import numpy as np

# Array from a list.
np.array([0, 1, 2])

# Matrix from lists.
np.array([[1,2],[3,4]])

# Array range 0 to 9.
np.arange(0,10)

# Array range with step of 2.
np.arange(0,11,2)

# Array of zeros.
np.zeros(4)
np.zeros((4,4))

# Array of ones.
np.ones(4)
np.ones((4,4))

# Line space
np.linspace(1,3,10)
array([1.        , 1.22222222, 1.44444444, 1.66666667, 1.88888889,
       2.11111111, 2.33333333, 2.55555556, 2.77777778, 3.        ])

# Identity matrix.
np.eye(3)

# Random from [0, 1).
np.random.rand(2)

# Random from a standard normal distribution.
np.random.randn(5)
array([0.81848283, 0.26742431, 0.51060867, 0.12867887, 0.12004976])

# Random from ints [low, high) and number of items.
np.random.randint(10,2000,5)
array([ 795,  899,  551, 1430,  976])

# Reshape to a matrix.
np.arange(0, 100, 1).reshape(10,10)

# Array of 20 linearly spaced points between 0 and 1.
np.linspace(0,1,20)

# Max and min value and location or max and min.
np.arange(20).min()
np.arange(20).max()
np.arange(20).argmin()
np.arange(20).argmax()

# Show array dimension.
np.arange(20).shape()

# Reshape one dimensional array
>>> np.arange(25).reshape(5,5)
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])

# Get data type from array
>>> np.arange(10).dtype
dtype('int64')

# Broadcast
>>> arr = np.arange(10)
>>> arr
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> arr[0:5] = 100
>>> arr
array([100, 100, 100, 100, 100,   5,   6,   7,   8,   9])

# Copy array, so slice not point to same memory area
new_array = arr.copy()

# Two ways to access a array element
arr[0][0]
# or
arr[0,0]
# using slice
arr[0:2, 1:3]

# Conditional selection
>>> arr = np.arange(10)
>>> arr
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> bool_arr = arr > 5
>>> bool_arr
array([False, False, False, False, False, False,  True,  True,  True, True])
>>> arr[bool_arr]
array([6, 7, 8, 9])

