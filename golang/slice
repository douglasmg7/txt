# Slice are tiny objects that abstract and manipulate an underlying array.
# They're three-filed data structures that contain metadata Go needs to manipulate the underlying arrays.
#   Addr pointer
#   Length
#   Capacity

# Create a slice of strings.
# Contains a length and capacity of 5 elements.
slice := make([]string, 5)
# Lenght and capacity of 5.

# Lenght of 3 and capacity of 5.
slice := make([]int, 3, 5)

# Create a literal slice with length 3 and capacity 3.
slice := []string{"Red", "Blue", "Green"}

# Initialize the 100th element with an empty string.
slice := []sting{99: ""}

# If you specify a value inside the [] operator, you're creating an array.
# If you don't specify a value, you're creating a slice.

# Create a nil slice of integers.
var slice []int
# They can be used with many of the standard library and built-in functions that work with slices.
# They're useful when you want to represent a slice that doesn't exist, such as when an
# exception occurs in a function that returns a slice.

# Create a empty slice.
slice := make([]int, 0)
slice := []int{}
# Am empty slice contains a zero-element underlying array that allocates no storage.
# Empty slice are useful when you want to represent an empty collection, such as when
# a database query returns zero results.

# Create a slice that describes elements 100 through 150 (to be precise, 100 through 149, inclusive) by slicing the array.
var slice []byte = buffer[100:150]
# The more idiomatic syntax would drop the type, which is set by the initializing expression.
var slice = buffer[100:150]
# Inside a function we could use the short declaration form,
slice := buffer[100:150]

<<<<<<< HEAD
# Three index slices gives you control over the capacity of the new slice.
# The purpose is not to increase capacity, but to restrict the capacity.
# If you attempt to set a capacity that's large than available capacity, you'll get a run time error.
slice := source[2:3:4]

# By having the option to set the capacity of a new slice to be the same as the length,
# you can force the first append operation to detach the new slice from the underlying array.
# Detaching the new slice from its original source array makes it safe to change.
source := []string{"Apples", "Oranges", "Plum", "Banana", "Grape"}
# Contains a length and capacity of 1 element.
slice := source[2:3:3]
# Will create a new underlying array.
slice = append(slice, "Kiwi")

# Append two slices.
append(s1, s2...)

# iterate.
for index, value := range slice {
  fmt.Printf("Index: %d Value: %d\n", index, value)
}
# value is a copy.
=======
# Append.
newslice = append(newslice, 60)
# When there's no available capacity in the underlying array for a slice, append function
# will create a new underlying array, copy the existing values that are being referenced, and assign the new value.
>>>>>>> c203135db703b73b85ccfdb70513099c469d4c66
