var TodoItem = Backbone.Model.extend({});
var todoItem = new TodoItem(
	{description: 'Pick up milk', status: 'incomplete', id:1}
);
create a model

todoItem.get('description');
todoItem.set('description', 'verde');
todoItem.save();
manipulating a model

var TodoView = Backbone.View.extend({
	render() {
		var html = '<h3>' + this.model.get('description') + '</h3>';
		$(this.el).html(html);
	}
});
var totdoView = new TodoView({model: todoIem});

var todoItem = new TodoItem();
todoItem.url = '/todo';
todoItem.fetch();
fetching data from the server

var TodoItem = Backbone.Model.extend({urlRoot: '/todos'});
var todoItem = new TodoItem({id: 1});
todoItem.fetch(); //GET /todos/1
todoItem.set({description: 'Pick up cooks.'});
todoItem.save(); //PUT /todos/1 with json params

var todoItem.destroy(); //DELETE /todo/2

todoItem.toJSON();
get json from model

var TodoItem = Backbone.Model.extend({
	defaults: {
		description: 'Empty todo ...',
		status: 'incomplete'
	}
});
var Appointment = Backbone.Model.extend({
  defaults: function(){
    return { 
    	title: 'Checkup',
    	date: new Date()
    };
  }
});
default values

todoItem.on('event-name', function() {
	alert('event-name happened!');
});
todoItem.trigger('event-name');
models can have events

todoItem.on('change', doThing);
todoItem.set({description: 'Fill description'}); // trigger change event

todoItem.set({description: 'Fill description'}, {silent: true});
no triggering event

todoItem.off('change', doThing);
remove event listener

appointment.on('change:cancelled', function(){
  alert("Hey Dr. Goodparts, your appointment has changed!");
});
listem just to change on attribute cancelled

var SimpleView = Backbone.View.extend({});
simpleView = new SimpleView();
console.log(simpleView.el);
--> <div></div>
create a view

var SimpleView = Backbone.View.extend({tagName: 'li'});
make el be <li>

var SimpleView = Backbone.View.extend({
	tagName: 'article',
	id: 'todo_view',
	className: 'todo'
});
simpleView = new SimpleView();
console.log(simpleView.el); 
--> <article id='todo-view' class='todo'></article>

$('#todo-view').html();
$(todoView.el).html();
todoView.$el.html();
the last is a shorthand

var TodoView = Backbone.View.extend({
	template: _.template('<h3><%= description %><h3>'),
	render() {
		var attributes = this.model.toJSON();
		this.$el.html(this.template(attributes));
	}
});
var totdoView = new TodoView({model: todoIem});
todoView.render();

var todoView = Backbone.View.extend({
	events: {
		'click h3': 'alertStatus',
		'click .title': 'select'
	},
	alertStatus: function(e) {
		alert('Hey you clicked the h3!');
	}
})

var TodoList = Backbone.Collection.extend({
	model: TodoItem
});
var todoList = new TodoList();
todoList.length;
todoList.add(todoItem1);
todoList.at(0);
todoList.get(1); // get by id
todoList.remove(todoItem1);
collections

var todos = [
	{description: 'Pick up milk.', status: 'incomplete'},
	{description: 'Get a car wash.', status: 'incomplete'},
	{description: 'Learn Backbone.', status: 'incomplete'}
];
todoList.reset(todos);
bulk population - each item in array becomes a todoItem

var TodoList = Backbone.Collection.extend({
	url: '/todos'
});
var todoList = new TodoList();
todoList.fetch();

todoList.on('add', function(todoItem)){...});
events on collections

var TodoListView = Backbone.View.extend({
	initialize: function(){
		this.collection.on('add', this.addOne, this);
	},
	collection: todoList,
	render: function(){
		this.collection.forEach(addOne, this);
	},
	addOne: function(todoItem){
		var todoView = new TodoView({model: todoItem});
		this.$el.append(todoView.render().el);
	}
});
todoListView = new TodoListView();
todoListView.render();
todoListView.add(newTodoItem);
console.log(todoListView.el);

var router = new Backbone.Router({
	routes: {'todos/:id': 'show'},
	index: function(id) {}
});
create a route

route.navigate('todo/1', {
	trigger: true
});
triggering routes

Backbone.history.start();
router.navigate('todos/1') --> #todo/1
pushState off - avoid

Backbone.history.start({pushState: true});
router.navigate('todos/1') --> /todo/1
pushState on - better

var TodoRouter = Backbone.Router.extend({
	routes: {'
		'': 'index',
		todos/:id': 'show'},
	index: function(){
		this.todoList.fetch();
	}
	show: function(id){
		this.todoList.focusOnTodoItem(id);
	},
	initialize: function(options){
		this.todoList = options.todoList;
	}
});
var todoList = new TodoList();
var TodoApp = new TodoRouter({todoList: todoList});

todoItems.fetch({data: {page: 6}});
fetch with extra params

var TodoItems = Backbone.Collection.extend({
	comparator: 'status'
});
order models by comparator

var TodoItems = Backbone.Collection.extend({
	comparator: function(todo1, todo2){
		return todo1.get('status') < todo2.get('status');
	}
});
order models by comparator using function

this.where({status: 'complete'}).length;
return filtered array of models

var todoRouter = new (Backbone.Router.extend({
	routes: {
		'search/:query(/p:page)(/)': 'search',
		'*path': 'notFound'
	},
	search: function(query, page){
		page = page || 0;
		query = decodeURIComponent(query); //'hello%20world' --> 'hello world'
		console.log(query);
		console.log(page);
	},
	notFound: function(path){
		alert('Sorry! There is no content here');
	}
}));
TodoRouter.navigate('search/milk', {trigger: true}); 
TodoRouter.navigate('search/milk/p2', {trigger: true}); 
TodoRouter.navigate('search/milk/p2/', {trigger: true}); 
define multiples routes on same line

var todoView = new TodoView({model: todoItem, el: $('.todo')});
todoView.render();
using an existing tag

var todoView = new TodoView({
	model: todoItem,
	user: currentUser
});
var TodoView = Backbone.View.extend({
	initialize: function(){
		this.user = this.option.user;
	}
});
using extra options

var TodoView = Backbone.View.extend({
	template: _.template('<%= description %>'),
	render: function(){
		this.$el.html(this.template(this.model.attributes));
		return this;
	}
})
var todoView = new TodoView({model: todoItem})
todoItem.set('description', "<script src='attack.js' />");
todoItem.render().el --> <div><script src='attack.js' /></div>

var TodoView = Backbone.View.extend({
	template: _.template('<%= model.escape("description") %>'),
	render: function(){
		this.$el.html(this.template({model: this.model}));
		return this;
	}
})
var todoView = new TodoView({model: todoItem})
todoItem.set('description', "<script src='attack.js' />");
todoItem.render().el --> <div>&lt;script src=&#x27;attack.js&#x27; /&gt; </div>

var TodoView = Backbone.View.extend({
	initialize: function(){
		this.listenTo(this.model, 'change', this.render);
	}
});
view listen to a model
view event clenup
todoView.stopListening(); // stop all listeners for this view
todoView.remove(); // will automatically call stopListening()

var AppointmentView = Backbone.View.extend({
  template: _.template("<span><%= title %></span>"),
  initialize: function(){
    this.model.on('change:title', this.changedTitle, this);
  },
  render: function(){
    this.$el.html(this.template(this.model.attributes));
  },
  changedTitle: function(model, value, options){
    this.$('span').html(value);
    if(options.highlight) {
    	this.$el.effect('highlight', {}, 1000);
    }
  }
});
var appointment = new Appointment({title: "Toothache"});
var appView = new AppointmentView({model: appointment});
appointment.set({title: "General Cleaning"}, {highlight: false});
event options

errors = JSON.parse(xhr.responseText).erros;
error: function from save

var App = new (Backbone.View.extend ({
	Models: {},
	Views: {},
	Collections: {},
	events: {
		'click a': function(e){
			e.preventDefault();
			Backbone.history.navigate(e.target.pathname, {trigger: true});
		}
	},
	start: function(){
		Backbone.history.start();
	}
}))({el: document.body});
$(function(){app.start();});
App.Models.TodoItem = Backbone.Model.extend({});
App.TodoRouter = Backbone.Router.extend({});
var todoItem = new App.Models.TodoItem({});
using a global object for namespace

