let tes = 3;
scoped to the nearest block and are not hoised
scoped to the nearest block and not function

const MAX_USERS;
MAX_USERS = 10;
error

const MAX_USERS = 10;
correct

function loadProfiles(usernames = []) {
	...
}
default parameters values

function setPageThread(name, {popular, expires, activeClass}){
	console.log('Name: ', name );
	console.log('popular: ', popular );
	console.log('Expires: ', expires );
	console.log('Active: ', activeClass );
}
named parameters

function setPageThread(name, {popular, expires, activeClass}={}){
}
to not cause error when invoked without parameters

function displayTags(...tags) {
	for(let i int tags){
		...
	}
}
function displayTags(targetElement, ...tags) {
	for(let i int tags){
		...
	}
}
rest parameters
must be the last parameter

...tags
spread operator allows us to split an array into individual elements
var tags = ['fx', 'cs', lt];
displayTags(tags[0], tags[1], tags[2]);
displayTags(...tags);

=>
arrow functions bind to the scope of where they are defined, not where they are used
also known as lexical binding

function buildUser(first, last) {
	let fullName = first + ' ' + last;
	return {first, last, fullName};
}
create object {first: first ...} automatic create the properties names
object initializer shorthand syntax

let name = 'Sam';
let age = 45;
let friends = ['Brook', 'Tyler'];
let user = {name, age, friend};
console.log(user.name);
object initializer shorthand - from variables to object properties

let {first, last, fullName} = buildUser('Sam', 'Williams');
let {fullName} = buildUser('Sam', 'Williams');
object destructuring - from object properties to variables

function buildUser(first, last) {
	let fullName = first + ' ' + last;
	const ACTIVE_POST_COUNT = 10;
	return {
		first, 
		last, 
		fullName,
		isActive() {
			return postCount >= ACTIVE_POST_COUNT;
		}
	}
}
method initializer shorthand

let first = 'Marcos'
let last = 'AurÃ©lio'
let fullName = `${first} ${last}`;
template string (back-ticks not single quotes)

let veryLongText = `Hi ${userName},

this is a very long text`
template sting - empty lines are preserved

function countdownTimer(target, timeLeft, options ={}){
	let defaults = {
		container: 	'.time-displa',
		timeUnit:	'seconds'
	};
	let settings = Object.assign({}, defaults, options);
}
Object.assign{target, source1, source2, sourcen};

let users = ['Sam', 'tyle', 'Brook'];
let [a, b, c] = users;
let [a, , c] = users; // not use the second element
console.log(a, b, c);
array destructuring

let users = ['Sam', 'tyle', 'Brook'];
let [first, ...last] = users;
console.log(first, last);
combine destructuring with rest parameters

let names = ['Sam', 'Tyler', 'Brook'];
for(let name of names) {
	console.log(name);
}

console.log(typeof users[Symbol.iterator]);
this function must be defined to for of work with the object

let users = [
	{login: 'Sam', admin: false},
	{login: 'Brook', admin: true}
	{login: 'Tyle', admin: true}];
let admin = users.find(user => user.admin);
console.log(admin);
find the first element in the array that satisfies a provided test function

let user1 = { name: 'Sam'};
let user2 = { name: 'Tyler'};
let totalReplies = new Map();
totalReplies.set(user1, 5);
totalReplies.set(user2, 42);
console.log(totalReplies.get(user1));
console.log(totalReplies.get(user2));
use Map when all keys are the same type and all values are the same type
If not use Object instead

for (let [key, value] of mapSettings) {
	console.log(`${key} = ${value}`);
}
maps can be used with for of

let user = {};
let comment = {};
let mapSettings = new WeakMap();
mapSettings.set(user. 'user');
mapSettings.set(comment, 'comment');
weak map can be used only with key object
is not iterable, can't use for of
weakmaps don't prevent the garbage collection from collecting objects currently used as keys, but that are no longer referenced anywhere else in the system

set
store unique values of any type

let tags = new Set();
tags.add('JavaScript');
tags.add('Programming');
tags.add({version: '2014'});
console.log('Total ', tags.size);
set objects are iterable and destructuring

WeakSet is like WeakMap

class SponsorWidget extends Widget {
	constructor(name, description, url) {
		super(); // run the constructor parent
		this.name = name;
		this.description = description;
		this.ulr = url;
	}

	render() {
		super.render(); // call parent method
	};
	_make() {}; // not public api
}

// flash-message.js
export default function(message) {
	alert(message);
}
// app.js
import flashMessage from './flash-message';
flashMessage('Hello');
module in js
defalut keyword permit use any name you want when importing

// message.js
export function alertMessage(message) {
	alert(message);
}
export function logMessage(message) {
	console.log(message);
}
// app.js
import {alertMessage, logMessage} from './message';
alertMessage('hello');
logMessage('hello');
module in js

// message.js
function alertMessage(message) {
	alert(message);
}
function logMessage(message) {
	console.log(message);
}
export {alertMessage, logMessage};

import * as flash from './flash-message';
flash.alertMessage('hello');
flash.logMessage('hello');
module in js

