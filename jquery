var j$ = jQuery.noConflict();   // j$('p')
no-conflict mode


jQuery(document).ready(function($){
});
no-conflict mode - locally-scoped $ in here as alias to jquery

jQuery(function($){
});
concise syntax for the dom ready function

'.destination li'
descendant selector

'.destination > li'
direct child selector

'.destiantion, .orgin'
multiple selectors

'.destiantion li:first'
'.destiantion li:last'
'.destiantion li:odd'
'.destiantion li:even'
pseudo selector

$('#destination').find('li'); = $('#destination li')
	selection	   traversal
traversing - is faster

$('li:first');
$('li').first();

$('li').first()
.next();	// for siblings elements
.prev();	// for siblings elements
.parent();

$('.teste').children();
unlike find(), only select direct children

var price = $('<p>From $399.99</p>');

.before()
.after()
.prepend() - add to the first child
.append() - add to the last child

filtring
.eq(index) - array index of jquery objects returned instead of []
.filter(.c1)
.first() = eq(0)
.last() = eq(-1)

<li class="usa tour" data-discount="299">
var temp = $('.tour').data('discount');
get attribute data

$('.tour').on('click', 'button', function() {});
selector inside a event

$('#tour').find('img').slideDown();
img {display: none}

$('.photos').slideToggle();

var price = +$(this).data('price');
use + to convert the string to a number

va quantity = +=(this).val();
get the value from input tag

$('.vaction').on('click', '.expand', function(event){
	event.preventDefault();
	$(this).closest('.vacation')
		   .find('.comments')
		   .fadeToggle();
});
avoid screem change position because href=#- preventDefault()

$('.vaction').on('click', '.expand', function(event){
	event.stopPropagation();
	$(this).closest('.vacation')
		   .find('.comments')
		   .fadeToggle();
});
avoid propagation of event from container objects

$(this).css('background-color', 'red')
	   .css('border-color', '1px solid blue');
$(this).css({'background-color': 'red',
			 'border-color': '1px solid #333'})	   

$(this).addClass('highlighted');
$(this).removeClass('highlighted');
$(this).toggleClass('highlighted');

$(this).animate({'top': '-10px'});
$(this).animate({'top': '-10px'}, 'fast');
$(this).animate({'top': '-10px'}, 300); - ms

$(this).hasClass('highliht');

function Tour(el) {
  var tour = this;
  this.el = el;
  this.fetchPhotos = function() { 
    $.ajax('/photos.html', {
      data: {location: tour.el.data('location')},
      context: tour,
      success: function(response) {
        this.el.find('.photos').html(response).fadeIn();
      },
      error: function() {
        this.el.find('.photos').html('<li>There was a problem fetching the latest photos. Please try again.</li>');
      },
      timeout: 3000,
      beforeSend: function() {
        this.el.addClass('is-fetching');
      },
      complete: function() {
        this.el.removeClass('is-fetching');
      }
    });
  }
  this.el.on('click', 'button', this.fetchPhotos);
}
$(document).ready(function() { 
  var paris = new Tour($('#paris'));
  var london = new Tour($('#london'));
});

$()
short hand to $(document).ready()

$('form').on('submit' ,function(event){
  event.preventDefault()  // prvents browser to submitting
  $.ajax('/book', {
    type: 'POST',
    data: {'destination': $('#destination').val(), 'quantity': $('#quantity').val()}
  });
});
using with forms

$('form').on('submit' ,function(event){
  event.preventDefault()  // prvents browser to submitting
  var form = $(this);
  $.ajax('/book', {
    type: 'POST',
    data: form.serialize(),
    success: function(res){
      form.remove();
      $('#vacation').hide().html(res).fadeIn();
    }
  });
});
using with forms using serialize

<form action='/book' method='POST'>
$('form').on('submit' ,function(event){
  event.preventDefault()  // prvents browser to submitting
  var form = $(this);
  $.ajax($('form').attr('action'), {
    type: 'POST',
    data: form.serialize(),
    dataType: 'json',   // parse the response as json
    success: function(res){
      form.remove();
      var msg = $(<p></p>);
      msg.append('Destination: ' + res.destination + '. ');
      msg.append('Price: ' + res.price + '. ');
      $('#vacation').hide().html(msg).fadeIn();
    },
    contentType: 'application/json'   // ask the server to respond with json
  });
});
using json

$.each(collection, function(<index>, <object>){});
interate through the array

$.map(collection, function(<item>, <index>){})
return a new array modified

$.ajax('/status', {
  contentType: 'application/json',
  type: 'json',
  success: function(res){}
});
$.getJSON('/status', function(res){});

$.map(result, function(status, i){
  var listItem = $('<li></li>');
  $('<h3>'+status.name+'</h3>').appendTo(listItem);
  $('<p>'+status.name+'</p>').appendTo(listItem);
  return listItem;
})

$('.status-list').detach()
                 .html(statusElements)
                 .appendTo('.status');
do not overload the dom creation

$('button').on('click.image', picture);
$('button').on('click.details', status);
$('button').off('click.image');
$('button').off('.image');
namespacing events

$('button').trigger('click');
$('button').trigger('click.details');
trigger the click event

$('button').on('new_event', method);
custom event

$.fn.pricify = function() {
	console.log('Pricify Called');
	console.log(this);
}
create a plugin

$.extend({days: 3}, {price: 5}, {color: 'red'});
{days: 3, price: 5, color: 'red'}

$.fn.pricify = function(options) {
	this.each(function(){
		var settings = $.extend({
			days: 3,
			vacation: this,
			price: $(this).data('price')
		}, options);
	});
};
$('.tour').pricify();

var Vacation = {
  getPrice: function(location){
   var promise = $.ajax('/vacation/prices', {
     data: {q: location}
   });
   return promise;
  }
}
$(document).ready(function() {
  $('button').on('click', function(){
    var location = $('.location').text();
    Vacation.getPrice(location).done(function(res){
    	$('.price').text(res.price);
    });
  });
});
promise

var Vacation = {
  getPrice: function(location){
   var promise = $.Deferred();
   $.ajax('/vacation/prices', {
     data: {q: location},
     success: function(res){
       promise.resolve(res.price);
     }
   });
   return promise;
  }
}
$(document).ready(function() {
  $('button').on('click', function(){
    var location = $('.location').text();
    Vacation.getPrice(location).done(function(result){
      $('.price').text(result);
    });
  });
});
promise with $.Deferred()

var Vacation = {
  getPrice: function(location){
    var promise = $.Deferred();
    $.ajax('/vacation/prices', {
      data: {q: location},
      success: function(result){
        promise.resolve(result.price);
      },
      error: function(){
        var error = 'invalid location';
        promise.reject(error);
      }
    });
    return promise;
  }
}
$(document).ready(function() {
  $('button').on('click', function(){
    var location = $('.location').text();
    Vacation.getPrice(location)
    	.done(function(result){$('.price').text(result)})
      .fail(function(err){console.log(err)});
  });
});
promise.resolve() promise.reject() done().fail() 

$.when(
  Vacation.getPrice(location),
  Photo.getPhoto(location))
.then(
  function(priceResult, photoResult){
  	$('<p>$'+priceResult+'</p>').appendTo(resultDiv);
    $('<img />').attr('src', photoResult).appendTo(resultDiv);
  }
);
forcing correct order call