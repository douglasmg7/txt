# Docker is a tool to make linux containers easy.

# Images is a template for containers.
# Containers are running instances of a images.

# Install on archlinux:
sudo pacman -Syu
sudo pacman -S docker
sudo usermod -aG docker douglasmg7
# The user needs to Log out and log back into the server so that group membership is re-evaluated.

# Start docker service.
sudo systemctl start docker.service

# Create a new container from a image and go in interactive mode.
# -i, --interactive                    Keep STDIN open even if not attached
# -t, --tty     Allocate a pseudo-TTY
docker run -it <image_name>

# Run commands on image (Dockerfile):
RUN

# Run commands on docker (Dockerfile):
['node', 'server.js']

# Define env variable (Dockerfile):
ENV PORT 80
EXPOSE $PORT

# Define args, can be used only into build command (Dockerfile):
ARG DEFAULT_PORT=80
ENV PORT $DEFAULT_PORT
docker build -t feedback-node:dev --build-arg DEFAULT_PORT=8000

# Create a image using the Dockerfile file.
docker build .  # Will give a id to use with docker run.

# Create a new container by image id, publish a port -p external:internal.
docker run -p 3000:3000 <image_id>
docker run -p 3000:3000 334837ba6abd

# Stop the container.
docker ps   # To find out the container name.
docker stop <container_id>
# Start container:
docker start <container_id>
# Start container in attach mode:
# -a, --attach list                    Attach to STDIN, STDOUT or STDERR
docker start -a <container_id>
# Start container in iterate and attach mode:
docker start -ia <container_id>
# Show logs:
docker logs <container_id>
docker logs -f <container_id>

# Create a contianer from a pre-build image.
docker run <image_name>
docker run node

# Create a container from a image id, publish a port -p external:internal.
docker run -p 3000:80 <image_id>
# Deatached mode and remove container when stopped
# -d, --detach                         Run container in background and print container ID
# --rm remove container when stopped, what is good if you only stop the container to build the image again.
docker run -p 3000:80 -d --rm <image_id>
# Attach to a container:
docker attach <container_id>

# List all running containers:
docker ps

# List all containers:
docker ps -a

# Remove container
docker rm <container_id1> <container_id2> <container_id3>
# Remove all stopped containers at once:
docker container purne

# List images.
docker images
docker images -a

# Remove image:
docker rmi <image_id>
# Remove all images not in use (that not have containers):
docker image prune
docker image prune -a   # Include tagged images.
# Inspect a image:
docker image inspect <image_id>

# Copy files to a container:
docker cp dummy/. <container_id>:/text
# Copy files from a container:
docker cp <container_id>:/text .

# Create a container using a name:tag image and give a container name.
docker run -p 3000:80 --name <container_name> <image_name>:<image_tag>

# Create a image with a name and tag:
docker build -t <name>:<tag> .
docker build -t goals:latest .
# Re-tag a image (create a clone image with the new name:tag):
docker tag <old_name>:<old_tag> douglasmg7/node-hello-world

# Push to docker:
docker login
docker build -t douglasmg7/node-hello-world:latest .    # Create a image with the same tag that will be pushed.
docker tag <old_name>:<old_tag> douglasmg7/node-hello-world:latest    # Or rename a existing image.
docker push douglasmg7/node-hello-world
docker logout   # Not necessary, can stay logged.

# Pull from docker, if already in the system make a update if necessary:
docker pull douglasmg7/node-hello-world:latest
# Make the pull automatically if not already in the system, do not do update:
docker run douglasmg7/node-hello-world:latest

# Auto pull:
docker run douglasmg7/node-hello-world:latest

# Volumes
docker volume ls                # List volumes
docker volume rm $VOL_NAME      # Remove one or more volumes
docker volume prune             # Remove all unused local volumes
docker volume inspect $VOL_NAME     # Inspect volume

# Create anonymous volume (Survives container stop/start, removed when container is removed. Used for logs):
# Tied to specific container
docker run -d -p 3000:80 --rm --name feedback-app -v /app/feedback feedback-node:volumes

# Create named volume (survives container rm, can be shared across containers):
# Not tied to specific container
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes

# Create Bind mount (use of absolute path /):
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "/home/douglasmg7/code/docker/data-volumes-01-starting-setup/:/app" feedback-node:volumes
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "$(pwd):/app" feedback-node:volumes
# Using ro read only to avoid container change the source code (sub sequent volumes overwrite the read only from app sub folder defined):
docker run -d -p 3000:80 --rm --name feedback-app -v "$(pwd):/app:ro" -v feedback:/app/feedback -v /app/temp feedback-node:volumes

# Using anonymous volume to keep directory from image (node_modules):
docker run -d -p 3000:80 --rm --name feedback-app -v /app/node_modules -v feedback:/app/feedback -v "$(pwd):/app" feedback-node:volumes

# Set env when run a container:
--env PORT=8000
-e PORT=8000
-e PORT=8000 -e RUN_MODE=dev
# Set file env:
--env-file ./.env
# .env
PORT=8000

# Mongodb localhost:
'mongodb://host.docker.internal:27017/database_name'
# Mongodb dockerized:
docker run -d --name mongodb mongo:3.6.3
docker container inspect mongodb        # To see IPAddress
'mongodb://172.17.0.2:27017/database_name'
'mongodb://container_name:27017/database_name'      # For docker network

# localhost server:
'http://host.docker.internal:27017/'

# Persist mongodb data:
docker run --name mongodb -v data:/data/db --rm -d mongo:3.6.3
docker run --name mongodb -v data:/data/db --rm -d -p 27017:27017 mongo:3.6.3

# Persist mongodb data and using password:
docker run --name mongodb -v data:/data/db --rm -d -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret mongo:3.6.3

# Network:
docker network create my_network        # Create network
docker run -d --name mongodb --network my_network mongo     # Using the network

# Mongodb:
docker run --name mongodb --rm -d -p 27017:27017 mongo:3.6.3

# Access container
docker exec -it 6d4 bash

# Command help:
docker ps --help

# Attach to a runing container:
docker attach <container_id>
