# Docker is a tool to make linux containers easy.

# Images is a template for containers.

# Install on archlinux:
sudo pacman -Syu
sudo pacman -S docker
sudo usermod -aG docker douglasmg7
# The user needs to Log out and log back into the server so that group membership is re-evaluated.

# Start docker service.
sudo systemctl start docker.service

# Create a new container from a image and go in interactive mode.
docker run -it node

# Run commands on image.
RUN

# Run commands on docker.
['node', 'server.js']

# Create a new image using the Dockerfile file.
docker build .

# Stop the container.
docker ps   # To find out the container name.
docker stop $ID
# Start container:
docker start $ID
# Start container in attach mode:
docker start -a $ID
# Start container in iterate and attach mode:
docker start -ia $ID
# Show logs:
docker logs $CONTAINER
docker logs -f $CONTAINER

# Run container by id, publish a port -p external:internal.
docker run -p 3000:80 334837ba6abd
# Deatached mode and remove container when stopped:
docker run -p 3000:80 -d --rm 334837ba6abd
# Attach to a container:
docker attach $ID

# List all running dockers:
docker ps

# List all dockers:
docker ps -a

# Remove container
docker rm $ID $ID2 $ID3
# Remove all stopped containers at once:
docker container purne

# List images.
docker images
docker images -a

# Remove image:
docker rmi $ID
# Remove all images:
docker image prune
docker image prune -a   # Include tagged images.
# Inspect a image:
docker image inspect $ID

# Copy files to a container:
docker cp dummy/. $ID:/text
# Copy files from a container:
docker cp $ID:/text .

# Naming container:
docker run -p 3000:80 --name container_name 334837ba6abd

# Tag image:
docker build -t goals:latest .
# Re-tag a image (create a clone image):
docker tag node-demo douglasmg7/node-hello-world

# Push and pull to docker:
docker login
docker push douglasmg/node-hello-world
docker logout
docker pull douglasmg7/node-hello-world:latest

# Auto pull:
docker run douglasmg7/node-hello-world:latest

# List volumes:
docker volumes ls

# Create a named volume:
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes

# Remove volumes:
docker volume rm $VOL_NAME
docker volume prune

# Bind volume:
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "/home/douglasmg7/code/docker/data-volumes-01-starting-setup/:/app" feedback-node:volumes
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "$(pwd):/app" feedback-node:volumes

# Using unamed volume to keep directory from image:
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "/home/douglasmg7/code/docker/data-volumes-01-starting-setup/:/app" -v "/app/node_modules" feedback-node:volumes
