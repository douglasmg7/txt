"create" (HTTP POST)
  POST /articles
  Not have _id, db will generate

"update" (HTTP PUT)
  PUT /article/1234

GET /tasks will retrieve a list of tasks;
POST /tasks will add a task to the list of tasks;
  http://localhost/ws
  no id
GET /tasks/:id will retrieve a single task;
PUT /tasks/:id will edit a property of a task;
  http://localhost/ws/22398723
  have id
DELETE /tasks/:id will delete a task.

200 OK	201 Created
202 Accepted	203 Not authorized
204 No content	205 Reset content
206 Partial content	 
300 Multiple choice	301 Moved permanently
302 Found	303 See other
304 Not modified	306 (unused)
307 Temporary redirect	 
400 Bad request	401 Unauthorized
402 Payment required	403 Forbidden
404 Not found	405 Method not allowed
406 Not acceptable	407 Proxy auth required
408 Timeout	409 Conflict
410 Gone	411 Length required
412 Preconditions failed	413 Request entity too large
414 Requested URI too long	415 Unsupported media
416 Bad request range	417 Expectation failed
500 Server error	501 Not implemented
502 Bad gateway	503 Service unavailable
504 Gateway timeout	505 Bad HTTP version

An HTTP PUT is supposed to accept the body of the request, and then store that at the resource identified by the URI.
An HTTP POST is more general. It is supposed to initiate an action on the server. That action could be to store the request body at the resource identified by the URI, or it could be a different URI, or it could be a different action.
PUT is like a file upload. A put to a URI affects exactly that URI. A POST to a URI could have any effect at all.

To give examples of REST-style resources:
"POST /books" with a bunch of book information might create a new book, and respond with the new URL identifying that book: "/books/5".
"PUT /books/5" would have to either create a new book with the id of 5, or replace the existing book with ID 5.
In non-resource style, POST can be used for just about anything that has a side effect. One other difference is that PUT should be idempotent - multiple PUTs of the same data to the same URL should be fine, wheras multiple POSTs might create multiple objects or whatever it is your POST action does.

CRUD       HTTP
Create      POST
Read         GET
Update     PUT
Delete      DELETE
