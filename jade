h1
any text at the beginning of a line is interpreted as an HTML tag

h1= title
p= body
data that are passed to the jade template are called locals
{
	title: "Express.js Guide", 
	body: "The Comprehensive Book on Express.js"
}

div(id="content", class="main")
attributes
<div id="content" class="main">
</div>

a(href=url, data-active=isActive)
dynamic attribute
{
	url: "/logout",
	isActive: true
}

p
	| Hello World
pipe allows to write the content of the HTML on the new line

body#content.text
literal
<body id="content" class="text>
</body>


#content.text
<div id="content" class="text>
</div>

script.
	console.log('Hello Jade!");

- var arr = ['<a>', '<b>', '<c>']
ul
	- for(var i=0; i<arr.length; i++)
		li
			span= i
			span!="unescaped: " + arr[i] + "vs. "
			span="escaped: " + arr[i]
<ul>
<li><span>0</span><span>unescaped: <a> vs. </span><span>escaped: &lt;a&gt;</span></li>
<li><span>1</span><span>unescaped: <b> vs. </span><span>escaped: &lt;b&gt;</span></li>
<li><span>2</span><span>unescaped: <c> vs. </span><span>escaped: &lt;c&gt;</span></li>
</ul>
!= output <>
= convert to &lt;&gt;

// content
comented html, appear in the html code

//- change this line
commented jade, not appear in the html code

// if else from jade, not js
- var user = {}
- user.admin = Math.random()>0.5
if user.admin
	button(class="launch") Launch Spacecraft
else
	button(class="login") Log in

// each loops from jade (array)
- var languages = ['php', 'node', 'ruby']
div
	each value, index in languages
		p= index + ". " + value
// output
<div>
<p>0. php</p>
<p>1. node</p>
<p>2. ruby</p>
</div>
 
// each loops from jade (object) 
- var languages = {'php': -1, 'node': 2, 'ruby':1}
div
	each value, key in languages
		p= key + ": " + value
// output
<div>
<p>php: -1</p>
<p>node: 2</p>
<p>ruby: 1</p>
</div>

-var title = "Express.js Guide"
p Read the #{title} in PDF, MOBI and EPUB
interpolation

// case in jade
- var coins = Math.round(Math.random()*10)
case coins
	when 0
		p You have no money
	when 1
		p You have a coin
	default
		p You have #{coins} coins!

include ./includes/header
top-to-bottom approach

extend
In file_a:
 
block header
	p some default text
block content
	p Loading ...
block footer
	p copyright
 
In file_b:
 
extend file_a
block header
	p very specific text
block content
	.main-content

